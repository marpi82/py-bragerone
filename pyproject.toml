[build-system]
requires = ["poetry-core>=2.0.0", "poetry-dynamic-versioning>=1.4.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "py-bragerone"
description = "Async client for Brager One: REST + Socket.IO, EventBus, ParamStore/StateStore, HA-ready"
authors = [{ name = "MarPi82", email = "marpi82.dev@google.com" }]
maintainers = [{ name = "MarPi82", email = "marpi82.dev@google.com" }]
dynamic = [ # version is managed by poetry-dynamic-versioning
  "version",
  "readme",
]
license = "MIT"
license-files = ["LICENSE"] # PEP 621 way to declare license file
requires-python = ">=3.13.0,<4"
keywords = [
  "home",
  "automation",
  "brager",
  "bragerone",
  "socket.io",
  "websocket",
  "aiohttp",
  "pydantic",
  "home-assistant",
]
dependencies = [
  "aiohttp>=3.11.0,<4.0.0",
  "python-socketio[asyncio_client]>=5.11.0,<6",
  "pydantic>=2.0.0,<3",
  "typing-extensions>=4.12",
]

[project.urls]
Homepage = "https://github.com/marpi82/py-bragerone"
Documentation = "https://marpi82.github.io/py-bragerone/latest/"
Repository = "https://github.com/marpi82/py-bragerone"
Issues = "https://github.com/marpi82/py-bragerone/issues"
Changelog = "https://github.com/marpi82/py-bragerone/blob/master/CHANGELOG.md"

[project.scripts]
pybragerone = "pybragerone.__main__:main"
pybragerone-cli = "pybragerone.cli:main"
pybragerone-parsers = "pybragerone.cli_extras.parsers:main"
pybragerone-ha-blueprint = "pybragerone.cli_extras.ha_blueprint:main"

[project.optional-dependencies]
cli = ["typer>=0.12", "rich>=13.7", "aiofiles>=24.1"]
ha = ["homeassistant>=2025.2.0"]

[tool.poetry]
requires-poetry = ">=2.0.0"
readme = ["README.rst", "docs/README.rst"]
packages = [{ include = "pybragerone", from = "src" }]
include = ["src/pybragerone/py.typed"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Topic :: Home Automation",
]

# -------- Developer groups (local only, not published to PyPI) --------
version = "0.0.0" # placeholder needed by Poetry

[tool.poetry.group.dev.dependencies]
poethepoet = "^0.37.0"
ruff = "^0.13.0"
mypy = { extras = ["dmypy"], version = "^1.18.1" }
pre-commit = "^4.3.0"
python-dotenv = "^1.1.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
aioresponses = "^0.7.6"

[tool.poetry.group.docs.dependencies]
sphinx = "^8.0.2"
furo = "^2024.8.6"
myst-parser = "^4.0.0"
sphinx-autodoc-typehints = "^2.4.4"
mike = "^2.1.3"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
strict = true
pattern = '^(?P<base>\d{4}(?:.\d{1,2}(?:.\d{1,2})?)?)(?:(?P<stage>a|b|rc)(?P<revision>\d+))?$'
format-jinja = "{% if distance == 0 %}{{ serialize_pep440(base, stage, revision) }}{% else %}{{ serialize_pep440(base, stage, revision, dev=distance) }}{% endif %}"

# ---------------- Ruff (formatter + linter) ----------------
[tool.ruff]
target-version = "py313"
line-length = 130
indent-width = 4

[tool.ruff.lint]
select = ["E", "F", "W", "I", "D", "UP", "RUF", "SIM", "B"] #, "ANN",]
#ignore = [
#  "D100", # Missing docstring in public module
#  "D104", # Missing docstring in public package
#  "D107", # Missing docstring in __init__
#]
fixable = ["ALL"]
unfixable = []

#[tool.ruff.lint.per-file-ignores]
#"__init__.py" = ["E402"]
#"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# ---------------- mypy (strict) ----------------
[tool.mypy]
python_version = "3.13"
files = ["src/pybragerone"]
strict = true
warn_unused_ignores = true
disallow_untyped_defs = true
no_implicit_optional = true
strict_optional = true
plugins = ["pydantic.mypy"]

# ---------------- pytest ----------------
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q"
# or with coverage:
# addopts = "-q --cov=pybragerone --cov-report=term-missing"
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
markers = [
  "slow: potentially slower tests (network)",
  "needs_internet: tests that require internet access",
]

[tool.coverage.run]
branch = true
source = ["src/pybragerone"]


# ---------------- POE tasks ----------------
# (optional) Poe tasks, if you use 'poe' locally
[tool.poe.tasks]
bootstrap = { cmd = "poetry install --with dev,test,docs" }
# format/lint/typecheck
fmt = "ruff format"
lint = "ruff check src/pybragerone --fix"
typecheck = "mypy src/pybragerone --strict"
all = ["fmt", "lint", "typecheck"]
# Tests
test = { cmd = "pytest -q" }
cov = { cmd = "pytest -q --cov=pybragerone --cov-report=term-missing" }
# Build
build = { cmd = "poetry build" }
# Docs
docs-build = { cmd = "sphinx-build -b html docs docs/_build/html" }
docs-serve = { shell = "python -m http.server --directory docs/_build/html 8000" }
# Publication (local; CI have its own secrets)
publish-pypi = { shell = "poetry publish --build --no-interaction" }
publish-testpypi = { shell = "poetry publish --build --repository testpypi --no-interaction" }
